import tensorflow as tf 
from google.colab import drive 
import matplotlib.pyplot as plt 

drive.mount('/content/drive') 
img_path = '/content/drive/MyDrive/cat.png' 

image_raw = tf.io.read_file(img_path) # tf.io.read_file - это функция TensorFlow, которая читает содержимое файла как строку байтов. 
image_tf = tf.io.decode_image(image_raw) # tf.io.decode_image - это функция TensorFlow, которая декодирует изображение из строки байтов в тензор. 
image_tf = tf.image.rgb_to_grayscale(image_tf) # tf.image.rgb_to_grayscale - это функция TensorFlow, которая преобразует цветное изображение (RGB) в изображение в оттенках серого. 
 
image_tf = tf.expand_dims(image_tf, axis=0) # tf.expand_dims - это функция TensorFlow, которая добавляет размерность (ось) к тензору. 
image_tf = tf.cast(image_tf, tf.float32)  # tf.cast - это функция TensorFlow, которая преобразует тип данных тензора в указанный тип данных. 
 
filter_tf = tf.constant([[[[1]], [[0]]], [[[0]], [[1]]]], dtype=tf.float32) # Ядро 
 
output_tf = tf.nn.conv2d(input=image_tf, filters=filter_tf, strides=[1, 1, 1, 1], padding='VALID') # tf.nn.conv2d - это функция TensorFlow, которая выполняет операцию свертки на входном тензоре с помощью заданного фильтра (ядра свертки). 

print(output_tf.numpy().squeeze()) 
 
plt.figure(figsize=(8, 4)) 
plt.subplot(1, 2, 1) 
plt.imshow(image_tf.numpy().squeeze(), cmap='gray') 
plt.title('Исходник') 

plt.subplot(1, 2, 2) 
plt.imshow(output_tf.numpy().squeeze(), cmap='gray') 
plt.title('Результат') 
 
plt.show() 

